)
learning_topics$functionsCreated$demand(1.2)
typeof(demand_return)
# 查詢函數執行所要求環境
environment(demand_return)
install.packages("forcats")
askSilly_weather("臺中市")
askSilly_weather <- function(locationInput,dateInput){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
(weatherAtLocation$elementName=="MaxT") ->
pick_MaxT
(weatherAtLocation$elementName=="MinT") ->
pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
}
class(demand_return)
askSilly_weather("臺中市")
what_time_it_is("Europe/Paris")
what_time_it_is("Europe/Paris")
# 若函數執行需要Global environment已存在某些物件，查詢需要哪些物件
codetools::findGlobals(demand_return)
intercept <- 10
slope <- -5
myDemand <- function(p){
q_d <- intercept + slope*p
return(q_d)
}
environment(demand_return)
environment(myDemand)
codetools::findGlobals(demand_return)
codetools::findGlobals(myDemand)
# myDemand對Global environment的要求多了intercept及slope
# 移除global environment裡的intercept及slope
rm(intercept, slope)
demand_return(1.2) # 維持正常運作
myDemand(1.2) # 無法運作
intercept <- 10
slope <- -5
myDemand(1.2)
slope <- -1
myDemand(1.2)
intercept <- 5
slope <- -1.2
myDemand(1.2)
myDemand2 <- function(p, intercept=10, slope=-5){
q_d <- intercept + slope*p
return(q_d)
}
environment(myDemand2)
findGlobals(myDemand2) # 不依靠global env裡的intercept/slope
myDemand2(1.2)
myDemand2(1.2, slope=-1)
myDemand2(1.2, intercept=5, slope=-1.2)
library(httr)
library(magrittr)
GET("https://ptx.transportdata.tw/MOTC/v2/Bus/EstimatedTimeOfArrival/City/NewTaipei/916?$top=30&$format=JSON") %>%
content -> estimatedArrivalTime_916
GET("https://ptx.transportdata.tw/MOTC/v2/Bus/Route/City/NewTaipei/939?$top=30&$format=JSON") %>%
content -> route_916
when_busArrives("916","臺北大學正門")
when_busArrives("916","臺北大學正門")
what_time_it_is("Europe/Paris")
askSilly_weather("臺中市")
listExample <- list(student = "小明", 學期 = list(`108-1` = list(list(name = "個體經濟學",
teacher = "Alice", grade = 85)), `108-2` = list(list(name = "總體經濟學",
teacher = "Mark", grade = 78))))
# 有多少位置可選：
length(listExample)
listExample[[1]]
listExample[[2]]
numVector <- c(2, 3, 6, -1, 4, 2, 6)
select1 <- numVector[c(1, 4)]
select1
select2 <- select1[[1]]
select2
listExample <- list(student = "小明", 學期 = list(`108-1` = list(list(name = "個體經濟學",
teacher = "Alice", grade = 85)), `108-2` = list(list(name = "總體經濟學",
teacher = "Mark", grade = 78))))
# 有多少位置可選：
length(listExample)
str(listExample)
# 108-1新增一科目成績
listExample$學期$`108-1`[[2]] <- list( "產業經濟學")
str(listExample)
listExample$學期$`108-1`[[2]][c("teacher", "grade")] <- list("Wen", 88)
str(listExample)
str(listExample)
# 108-1新增一科目成績
listExample$學期$`108-1`[[2]] <- list( name = "產業經濟學")
str(listExample)
listExample$學期$`108-1`[[2]][c("teacher", "grade")] <- list("Wen", 88)
str(listExample)
library(lubridate)
list1 <- list(list(name = "Jack", birthday = ymd("1998-03-21"), status = c(height = 177,
weight = 80)), list(name = "Mary", birthday = ymd("1998-08-24"), status = c(height = 163,
weight = 45), age = 21, bloodType = "AB"))
str(list1)
str(list1)
list1[[1]]  # 小心回存的位置
<- list1[[1]][-3]
list1[[2]] <- list1[[2]][-c(4, 5)]
str(list1)
library(lubridate)
list1 <- list(list(name = "Jack", birthday = ymd("1998-03-21"), status = c(height = 177,
weight = 80)), list(name = "Mary", birthday = ymd("1998-08-24"), status = c(height = 163,
weight = 45), age = 21, bloodType = "AB"))
str(list1)
str(list1)
list1[[1]]  # 小心回存的位置
<- list1[[1]][-3]
str(list1)
list1[[1]]  <- list1[[1]][-3]
list1[[2]] <- list1[[2]][-c(4, 5)]
str(list1)
library(lubridate)
list1 <- list(list(name = "Jack", birthday = ymd("1998-03-21"), status = c(height = 177,
weight = 80)), list(name = "Mary", birthday = ymd("1998-08-24"), status = c(height = 163,
weight = 45), age = 21, bloodType = "AB"))
str(list1)
str(list1)
list1[[1]]  <- list1[[1]][-3]
list1[[2]] <- list1[[2]][-c(4, 5)]
str(list1)
a%%b
a <- c(2, 3, 5)
b <- c(4, -1, 3)
a%%b
# 相當於
c(2%%4, 3%%(-1), 5%%3)
a^b
# 狀況一: 堆疊一定倍數剛好一樣長
c(2, 3)/c(-2, -13, 10, 22)
c(2, 3, 2, 3)/c(-2, -13, 10, 22)
# 狀況二: 倍數堆疊一定會超過，只好截斷
c(2, 3)/c(-2, -13, 10)
c(2, 3, 2)/c(-2, -13, 10)
paste0(c("我叫"), c("小明", "小美"))
sequenceNums <- c(11, 6, 8, 11, 12, 11, 3, 7, 10, 8)
pick_evens <- (sequenceNums%%2) == 0
sequenceNums[pick_evens]
x <- c(1, 5, 8)
y <- c(5, 8)
# x裡的元素值是不是屬於y集合
x %in% y
x2 <- c(1, NA, 10)
y2 <- c(-1, NA, 20)
x3 <- c(NA, "小花")
y3 <- c(NA, "小華")
is.na(x2)
x2
is.na(x2)
fruit <- c("apple", "banana", "pear", "pinapple")
str_detect(fruit, "a")
library(stringr)
fruit <- c("apple", "banana", "pear", "pinapple")
str_detect(fruit, "a")
str_detect(fruit, "^a")
str_detect(fruit, "a$")
str_detect(fruit, "^a")
str_detect(fruit, "a$")
str_detect(fruit, "a$")
str_detect(fruit, "b")
str_detect(fruit, "[aeiou]")
# Also vectorised over pattern
str_detect("aecfg", letters)
# Returns TRUE if the pattern do NOT match
str_detect(fruit, "^p", negate = TRUE)
char1 <- c("Wild", "Apple", "Donald", "May", "Avocada")
factor1 <- factor(char1)
levels(factor1)
char2 <- c("蔡英文", "習近平", "Donald Trump", "蔡頭")
factor2 <- factor(char2)
levels(factor2)
sort(str_sub(char2, 1, 1))
sort(str_sub(char2, 2, 2))
Sys.getlocale("LC_COLLATE")
covid19 <- jsonlite::fromJSON("https://od.cdc.gov.tw/eic/Day_Confirmation_Age_County_Gender_19CoV.json")
covid19$是否為境外移入 <- factor(covid19$是否為境外移入)
covid19$性別 <- factor(covid19$性別)
covid19$是否為境外移入 <- factor(covid19$是否為境外移入)
# 可排序類別資料：年齡層
covid19$年齡層 <- factor(covid19$年齡層, ordered = TRUE)
if(condition){
Body for TRUE
# 先執行此行輸入學號
readline(prompt = "請輸入你的學號") -> studentId
# 先執行此行輸入學號
readline(prompt = "請輸入你的學號") -> studentId
# 之後才執行以下程式
if(
str_detect(studentId,'^[43](1[01][0-9]|9[0-9])[0-9]{5}$',negate=T) # condition: 是否輸入學號正確？
) {
warning("你所輸入的學號不正確")
}
# 之後才執行以下程式
library(stringr)
if(
str_detect(studentId,'^[43](1[01][0-9]|9[0-9])[0-9]{5}$',negate=T) # condition: 是否輸入學號正確？
) {
warning("你所輸入的學號不正確")
}
# 先執行此行輸入學號
readline(prompt = "請輸入你的學號") -> studentId
# 先執行此行輸入學號
readline(prompt = "請輸入你的學號") -> studentId
# 之後才執行以下程式
library(stringr)
if(
str_detect(studentId,'^[43](1[01][0-9]|9[0-9])[0-9]{5}$',negate=T) # condition: 是否輸入學號正確？
) {
warning("你所輸入的學號不正確")
}
# 先執行此行輸入學號
readline(prompt = "請輸入你的學號") -> studentId
library(stringr)
if(
str_detect(studentId,'^[43](1[01][0-9]|9[0-9])[0-9]{5}$',negate=T) # condition: 是否輸入學號正確？
) {
warning("你所輸入的學號不正確")
}
warning("你所輸入的學號不正確")
if(!require(lubridate)){ # condition: 是否「沒安裝lubridate」？
install.packages("lubridate")
}
lubridate::ymd_hms("2020-07-01 13:00:00 GMT")
lubridate::ymd(twDate_reformat)
if(!require(lubridate)){ # condition: 是否「沒安裝lubridate」？
install.packages("lubridate")
}
lubridate::ymd_hms("2020-07-01 13:00:00 GMT")
twDate <-  c("民國108年12月5日","民國98年10月5日")
library(stringr)
# 準備regex:
## 取出：「前有」民國，「後有」年的「數字」「們」
## "(?<={A_regex}){target_regex}(?={B_regex})"
target_regex <- "[0-9]+"
A_regex <- "民國"
B_regex <- "年"
regex_pattern <- glue::glue(
"(?<={A_regex}){target_regex}(?={B_regex})"
)
print(regex_pattern)
## 如果同學已經很熟就可以直接寫
regex_pattern <-
"(?<=民國)[0-9]+(?=年)"
# 取出民國年，計算西元年
year <-
str_extract(
twDate,
regex_pattern)
westernYear <- as.integer(year)+1911
# 替換民國xx年的xx成西元年數字
str_replace(
twDate,
regex_pattern,  # 要換掉的文字
as.character(westernYear) # 要替換的內容
) -> twDate_reformat
print(twDate_reformat)
lubridate::ymd(twDate_reformat)
convert_TaiwanDate2WesternDate <- function(twDate){
library(stringr)
regex_pattern <-
"(?<=民國)[0-9]+(?=年)"
# 取出民國年，計算西元年
year <-
str_extract(
twDate,
regex_pattern)
westernYear <- as.integer(year)+1911
# 替換民國xx年的xx成西元年數字
str_replace(
twDate,
regex_pattern,  # 要換掉的文字
as.character(westernYear) # 要替換的內容
) -> twDate_reformat
lubridate::ymd(twDate_reformat) -> westernDate
return(westernDate)
}
twDate <-  c("民國108年12月5日","民國98年10月5日")
convert_TaiwanDate2WesternDate(twDate)
convert_TaiwanDate2WesternDate <- function(twDate){
if(!require("stringr")){
install.packages("stringr")
}
if(!require("lubridate")){
install.packages("lubridate")
}
library(stringr)
regex_pattern <-
"(?<=民國)[0-9]+(?=年)"
# 取出民國年，計算西元年
year <-
str_extract(
twDate,
regex_pattern)
westernYear <- as.integer(year)+1911
# 替換民國xx年的xx成西元年數字
str_replace(
twDate,
regex_pattern,  # 要換掉的文字
as.character(westernYear) # 要替換的內容
) -> twDate_reformat
lubridate::ymd(twDate_reformat) -> westernDate
return(westernDate)
}
# 檢視步驟耗時elapse time
system.time(
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
)
if(!exists("weather_next36hours")){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
SOAR::Store(weather_next36hours) # 存在.R_cache environment中
}
if(!exists("weather_next36hours")){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
SOAR::Store(weather_next36hours) # 存在.R_cache environment中
}
askSilly_weather2 <- function(locationInput,dateInput){
if(!exists("weather_next36hours")){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
SOAR::Store(weather_next36hours) # 存在.R_cache environment中
}
(weather_next36hours$cwbopendata$dataset$location$locationName == locationInput) -> pick_location
weather_next36hours$cwbopendata$dataset$location$weatherElement[pick_location][[1]] -> weatherAtLocation
(weatherAtLocation$elementName=="MaxT") ->
pick_MaxT
(weatherAtLocation$elementName=="MinT") ->
pick_MinT
weatherAtLocation$time[pick_MaxT][[1]]$parameter$parameterName[[1]] -> maxT
weatherAtLocation$time[pick_MinT][[1]]$parameter$parameterName[[1]] -> minT
glue::glue("{locationInput} {dateInput} 氣溫，最高{maxT}度，最低{minT}度。")
}
library(lubridate)
system.time(
askSilly_weather("新北市",today())
)
system.time(
askSilly_weather("臺北市",today())
)
askSilly_weather("新北市",today())
askSilly_weather("臺北市",today())
SOAR::Remove(weather_next36hours)
if(!exists("weather_next36hours")){
jsonlite::fromJSON("https://opendata.cwb.gov.tw/fileapi/v1/opendataapi/F-C0032-001?Authorization=rdec-key-123-45678-011121314&format=JSON") ->
weather_next36hours
SOAR::Store(weather_next36hours) # 存在.R_cache environment中
}
SOAR::Remove(weather_next36hours)
install.packages(soar)
install.packages("SOAR")
SOAR::Remove(weather_next36hours)
SOAR::Remove(weather_next36hours)
install.packages("SOAR")
lubridate(soar)
library(soar)
library(SOAR)
SOAR::Store(weather_next36hours) # 存在.R_cache environment中
# 測試
check_package("clipr")
library("soar")
library("SOAR")
# n 為偶數
n <- 54
fvalue <- n/2
# n 為奇數
n <- 33
fvalue <- -(n+1)/2
if((n %% 2 )==1){
fvalue <-  -(n+1)/2
}else{
fvalue <- n/2
}
print(fvalue)
myFun <- function(n){
if(as.logical(n %% 2)){
fvalue <- -(n+1)/2
} else {
fvalue <- n/2
}
return(fvalue)
}
myFun(54)
myFun(33)
as.logical(n %% 2) # 只有0會變F，其他數值都是T
(n %% 2)==1 # 表示「奇數」; 或...
as.logical(n %% 2) # 只有0會變F，其他數值都是T
n <- 54
if(as.logical(n %% 2)){
fvalue <- -(n+1)/2
} else {
fvalue <- n/2
}
print(fvalue)
jsonlite::fromJSON("https://www.dropbox.com/s/d14j5hp3i5ps657/examSubmissionTimes.json?dl=1") -> examSubmissionTime
head(examSubmissionTime$section)
head(examSubmissionTime$time)
i<-1
student_i_section <- examSubmissionTime$section[[i]]
student_i_time <- examSubmissionTime$time[[i]]
deadline <- lubridate::ymd_hms("2020-05-27 15:00:00", tz="Asia/Taipei") #
howEarly <- deadline - lubridate::ymd_hms(
student_i_time, tz="Asia/Taipei")
print(howEarly)
i<-1
student_i_section <- examSubmissionTime$section[[i]]
student_i_time <- examSubmissionTime$time[[i]]
if(student_i_section=="56"){
deadline <- lubridate::ymd_hms("2020-05-27 15:00:00", tz="Asia/Taipei")
} else {
deadline <- lubridate::ymd_hms("2020-05-27 17:00:00", tz="Asia/Taipei")
}
howEarly <- deadline - lubridate::ymd_hms(student_i_time, tz="Asia/Taipei")
print(howEarly)
i<-2
i<-2
student_i_section <- examSubmissionTime$section[[i]]
student_i_time <- examSubmissionTime$time[[i]]
if(student_i_section=="56"){
deadline <- lubridate::ymd_hms("2020-05-27 15:00:00", tz="Asia/Taipei")
} else {
deadline <- lubridate::ymd_hms("2020-05-27 17:00:00", tz="Asia/Taipei")
}
howEarly <- deadline - lubridate::ymd_hms(student_i_time, tz="Asia/Taipei")
print(howEarly)
i<-3
student_i_section <- examSubmissionTime$section[[i]]
student_i_time <- examSubmissionTime$time[[i]]
if(student_i_section=="56"){
deadline <- lubridate::ymd_hms("2020-05-27 15:00:00", tz="Asia/Taipei")
} else {
deadline <- lubridate::ymd_hms("2020-05-27 17:00:00", tz="Asia/Taipei")
}
howEarly <- deadline - lubridate::ymd_hms(student_i_time, tz="Asia/Taipei")
print(howEarly)
compute_howEarly <- function(student_i_section, student_i_time){
# student_i_section <- examSubmissionTime$section[[i]]
# student_i_time <- examSubmissionTime$time[[i]]
if(student_i_section=="56"){
deadline <- lubridate::ymd_hms("2020-05-27 15:00:00", tz="Asia/Taipei")
} else {
deadline <- lubridate::ymd_hms("2020-05-27 17:00:00", tz="Asia/Taipei")
}
howEarly <- deadline - lubridate::ymd_hms(student_i_time, tz="Asia/Taipei")
# print(howEarly)
return(howEarly)
}
compute_howEarly(examSubmissionTime$section[[1]],examSubmissionTime$time[[1]])
compute_howEarly(examSubmissionTime$section[[2]],examSubmissionTime$time[[2]])
compute_howEarly(examSubmissionTime$section[[3]],examSubmissionTime$time[[3]])
numberSeq <- 1:length(examSubmissionTime$section)
map(numberSeq,
~compute_howEarly(examSubmissionTime$section[[.x]],examSubmissionTime$time[[.x]]))
library(map)
library(purrr)
numberSeq <- 1:length(examSubmissionTime$section)
map(numberSeq,
~compute_howEarly(examSubmissionTime$section[[.x]],examSubmissionTime$time[[.x]]))
studentSequence <- 1:length(examSubmissionTime$section)
map(studentSequence,
~compute_howEarly(
examSubmissionTime$section[[.x]],
examSubmissionTime$time[[.x]])
) -> list_howEarly
library(magrittr)
list_howEarly %>%
unlist() -> examSubmissionTime$howEarly
pick_56 <- examSubmissionTime$section=="56"
mean(examSubmissionTime$howEarly[pick_56])
median(examSubmissionTime$howEarly[pick_56])
pick_78 <- examSubmissionTime$section=="78"
mean(examSubmissionTime$howEarly[pick_78])
median(examSubmissionTime$howEarly[pick_78])
if(condition A){
readline("請輸入你的成績（整數）： ") -> grade # 單獨執行
if(grade >=90){
print("優")
} else if(grade>=80 & grade<=89){
print("良")
} else if(grade>=70 & grade<=79){
print("尚可")
} else {
print("待加強")
}
grade <- 80
if(grade >=90){
print("優")
} else if(grade>=75 & grade<=89){
print("良")
} else if(grade>=70 & grade<=85){
print("尚可")
} else {
print("待加強")
}
grade <- 80
if(grade >=90){
print("優")
} else if(grade>=70 & grade<=85){
print("尚可")
} else if(grade>=75 & grade<=89){
print("良")
} else {
print("待加強")
}
